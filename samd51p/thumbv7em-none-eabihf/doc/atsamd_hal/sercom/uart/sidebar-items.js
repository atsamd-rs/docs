window.SIDEBAR_ITEMS = {"constant":[["DUPLEX_FLAG_MASK","Interrupt flags available for Duplex transactions"],["DUPLEX_STATUS_MASK","Status flags available for Duplex transactions"],["RX_FLAG_MASK","Interrupt flags available for RX transactions"],["RX_STATUS_MASK","Status flags available for RX transactions"],["TX_FLAG_MASK","Interrupt flags available for TX transactions"]],"enum":[["BaudMode","Baudrate calculation in asynchronous mode"],["BitOrder","Bit order of a UART frame"],["CharSizeEnum","`enum` version of [`CharSize`]"],["Duplex","Marker type representing a UART that has both transmit and receive capability"],["DynCharSize","Dynamic [`CharSize`] that can be changed on the fly"],["EightBit","[`CharSize`] variant for 8-bit transactions"],["Error","Errors available for UART transactions"],["FiveBit","[`CharSize`] variant for 5-bit transactions"],["NineBit","[`CharSize`] variant for 9-bit transactions"],["Oversampling","Baudrate oversampling values"],["Parity","Parity setting of a UART frame"],["Rx","Marker type representing a UART that can only receive"],["RxDuplex","Marker type representing the Rx half of a  [`Duplex`] UART"],["SevenBit","[`CharSize`] variant for 7-bit transactions"],["SixBit","[`CharSize`] variant for 6-bit transactions"],["StopBits","Number of stop bits in a UART frame"],["Tx","Marker type representing a UART that can only transmit"],["TxDuplex","Marker type representing a the Tx half of a [`Duplex`] UART"]],"mod":[["impl_ehal","`embedded-hal` trait implementations for [`Uart`]s"]],"struct":[["Config","A configurable, disabled UART peripheral"],["Flags","Interrupt bit flags for UART Rx transactions"],["Pads","Container for a set of SERCOM [`Pad`]s"],["Status","Status flags for UART Rx transactions"],["Uart","Abstraction over a UART peripheral, allowing to perform UART transactions. The second type parameter, `D`, denotes what the struct’s [`Capability`] is."]],"trait":[["AnyConfig","Type class for all possible [`Config`] types"],["Capability","Type-level `enum` representing the capabilities of a UART peripheral"],["CharSize","Type-level `enum` representing the UART character size"],["FixedCharSize","Type-level `enum` indicating a [`CharSize`] that is not dynamic"],["PadSet","Type-level function to recover the [`OptionalPad`] types from a generic set of [`Pads`]"],["Receive","Type-level enum representing a UART that can receive"],["RxpoTxpo","Configure the `RXPO` and `TXPO` fields based on a set of [`Pads`]"],["Simplex","Type-level enum representing a UART that has transmit or receive capability, but not both"],["Transmit","Type-level enum representing a UART that can transmit"],["ValidConfig","Marker trait for valid UART [`Config`]urations"],["ValidPads","Marker trait for valid sets of [`Pads`]"]],"type":[["Clock","Clock type needed to create a new [`Config`]. `MCLK` for thumbv7em targets."],["ConfigSercom","Type alias to recover the specific [`Sercom`] type from an implementation of [`AnyConfig`]"],["DataReg","Size of the SERCOM’s `DATA` register"],["PadsFromIds","Define a set of [`Pads`] using `PinId`s instead of `Pin`s"],["SpecificConfig","Type alias to recover the specific [`Config`] type from an implementation of [`AnyConfig`]"],["Word","Type alias to recover the `Word` type from an implementation of [`CharSize`]"]]};