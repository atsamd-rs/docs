window.SIDEBAR_ITEMS = {"constant":[["MODE_0","Helper for CPOL = 0, CPHA = 0"],["MODE_1","Helper for CPOL = 0, CPHA = 1"],["MODE_2","Helper for CPOL = 1, CPHA = 0"],["MODE_3","Helper for CPOL = 1, CPHA = 1"]],"enum":[["BitOrder","Define the bit order of transactions"],["Error","Error `enum` for SPI transactions"],["Master","[`OpMode`] variant for Master mode"],["MasterHWSS","[`OpMode`] variant for Master mode with hardware-controlled slave select"],["Phase","Clock phase"],["Polarity","Clock polarity"],["Slave","[`OpMode`] variant for Slave mode"]],"mod":[["impl_ehal","Implement [`embedded_hal`] traits for [`Spi`] structs"],["lengths","Valid transaction [`Length`]s from the [`typenum`] crate"]],"struct":[["Config","A configurable SPI peripheral in its disabled state"],["Duplex","Type-level variant of the [`Capability`] enum for duplex transactions"],["Flags","Interrupt bit flags for SPI transactions"],["Pads","Container for a set of SERCOM pads"],["Rx","Type-level variant of the [`Capability`] enum for simplex, [`Receive`]-only transactions"],["Spi","An enabled SPI peripheral that can perform transactions"],["Status","Status bit flags for SPI transactions"],["Tx","Type-level variant of the [`Capability`] enum for simplex, [`Transmit`]-only transactions"]],"trait":[["AnyConfig","Type class for all possible [`Config`] types"],["AnySpi","Type class for all possible [`Spi`] types"],["AtomicSize","Marker trait for transaction [`Size`]s that can be completed in a single read or write of the `DATA` register"],["Capability","Type-level enum representing the simplex or duplex transaction capability"],["Dipo","Map an [`OptionalPadNum`] to its corresponding `DIPO` value"],["DipoDopo","Configure the `DIPO` and `DOPO` fields based on a set of [`Pads`]"],["Dopo","Map an [`OptionalPadNum`] to its corresponding `DOPO` value"],["GreaterThan4","Marker trait for transaction [`Length`]s greater than four"],["Length","Type-level enum representing the SPI transaction length, in bytes"],["MasterMode","Marker trait for Master operating modes"],["OpMode","Type-level enum representing the SPI operating mode"],["PadSet","Type-level function to recover the [`OptionalPad`] types from a generic set of [`Pads`]"],["Receive","Sub-set of [`Capability`] variants that can receive data, i.e. [`Rx`] and [`Duplex`]"],["Size","Trait alias whose definition varies by chip"],["StaticLength","Marker trait for statically known transaction [`Length`]s"],["Transmit","Sub-set of [`Capability`] variants that can transmit dat, i.e. [`Tx`] and [`Duplex`]"],["ValidConfig","Marker trait for valid SPI [`Config`]urations"],["ValidPads","Marker trait for valid sets of [`Pads`]"]],"type":[["DataWidth","Type alias for the width of the `DATA` register"],["DefaultSize","Type alias for the default [`Size`] type, which varies by chip"],["DynLength","Marker type for a run-time dynamic [`Length`]"],["PadsFromIds","Define a set of [`Pads`] using `PinId`s instead of `Pin`s"],["SpecificConfig","Type alias to recover the specific [`Config`] type from an implementation of [`AnyConfig`]"],["SpecificSpi","Type alias to recover the specific [`Spi`] type from an implementation of [`AnySpi`]"],["Word","Type alias to recover the `Word` type from an implementation of [`Length`]"]]};